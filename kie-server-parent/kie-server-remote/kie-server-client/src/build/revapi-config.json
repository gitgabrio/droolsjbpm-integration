{
    "filters": {
        "revapi": {
            "java": {
                "_comment": "We don't want to check classes, just interfaces. Every class is therefore excluded so new interfaces and classes in future are discovered by revapi.",
                "filter": {
                    "packages": {
                        "_comment": [
                            "We don't want to check transitive classes, e.g. from kie-server-api, since we already check them in their own module.",
                            "Therefore, only module's packages are included. Excluded packages contain only classes."
                        ],
                        "regex": true,
                        "include": [
                            "org\\.kie\\.server\\.client.*"
                        ],
                        "exclude": [
                            "org\\.kie\\.server\\.client\\.admin\\.impl",
                            "org\\.kie\\.server\\.client\\.balancer\\.impl",
                            "org\\.kie\\.server\\.client\\.credentials",
                            "org\\.kie\\.server\\.client\\.impl"
                        ]
                    },
                    "classes": {
                        "_comment": "In the remaining packages which are mixed (both interfaces and classes), we just exclude classes.",
                        "regex": false,
                        "exclude": [
                            "org.kie.server.client.balancer.LoadBalancer",
                            "org.kie.server.client.helper.CaseServicesClientBuilder",
                            "org.kie.server.client.helper.DroolsServicesClientBuilder",
                            "org.kie.server.client.helper.JBPMServicesClientBuilder",
                            "org.kie.server.client.helper.JBPMUIServicesClientBuilder",
                            "org.kie.server.client.helper.OptaplannerServicesClientBuilder",
                            "org.kie.server.client.KieServicesException",
                            "org.kie.server.client.KieServicesFactory"
                        ]
                    }
                }
            }
        }
    },
    "ignores": {
        "revapi": {
            "_comment": "Changes between 7.33.0.Final and the current branch. These changes are desired and thus ignored.",
            "ignore": [
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.lang.Long org.kie.server.client.UserTaskServicesClient::saveTaskContent(java.lang.String, java.lang.Long, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)",
                    "package": "org.kie.server.client",
                    "classSimpleName": "UserTaskServicesClient",
                    "methodName": "saveTaskContent",
                    "elementKind": "method",
                    "justification": "save content impersonating a user"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.util.List<org.kie.server.api.model.cases.CaseInstanceCustomVars> org.kie.server.client.CaseServicesClient::queryCasesByVariables(org.kie.server.api.model.definition.SearchQueryFilterSpec, java.lang.Integer, java.lang.Integer)",
                    "package": "org.kie.server.client",
                    "classSimpleName": "CaseServicesClient",
                    "methodName": "queryCasesByVariables",
                    "elementKind": "method",
                    "justification": "added services for querying cases by variables"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.util.List<org.kie.server.api.model.cases.CaseUserTaskWithVariables> org.kie.server.client.CaseServicesClient::queryUserTaskByVariables(org.kie.server.api.model.definition.SearchQueryFilterSpec, java.lang.Integer, java.lang.Integer)",
                    "package": "org.kie.server.client",
                    "classSimpleName": "CaseServicesClient",
                    "methodName": "queryUserTaskByVariables",
                    "elementKind": "method",
                    "justification": "added services for querying user tasks belonging cases by variables"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.util.List<org.kie.server.api.model.instance.ProcessInstanceCustomVars> org.kie.server.client.QueryServicesClient::queryProcessesByVariables(org.kie.server.api.model.definition.SearchQueryFilterSpec, java.lang.Integer, java.lang.Integer)",
                    "package": "org.kie.server.client",
                    "classSimpleName": "QueryServicesClient",
                    "methodName": "queryProcessesByVariables",
                    "elementKind": "method",
                    "justification": "added services for querying processes by variables"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.util.List<org.kie.server.api.model.instance.ProcessInstanceUserTaskWithVariables> org.kie.server.client.QueryServicesClient::queryUserTaskByVariables(org.kie.server.api.model.definition.SearchQueryFilterSpec, java.lang.Integer, java.lang.Integer)",
                    "package": "org.kie.server.client",
                    "classSimpleName": "QueryServicesClient",
                    "methodName": "queryUserTaskByVariables",
                    "elementKind": "method",
                    "justification": "added services for querying task belonging process by varaibles"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.lang.Long org.kie.server.client.ProcessServicesClient::startProcessFromNodeIds(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String[])",
                    "package": "org.kie.server.client",
                    "classSimpleName": "ProcessServicesClient",
                    "methodName": "startProcessFromNodeIds",
                    "elementKind": "method",
                    "justification": "start process from arbitrary nodes"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.lang.Long org.kie.server.client.ProcessServicesClient::startProcessFromNodeIds(java.lang.String, java.lang.String, org.kie.internal.process.CorrelationKey, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String[])",
                    "package": "org.kie.server.client",
                    "classSimpleName": "ProcessServicesClient",
                    "methodName": "startProcessFromNodeIds",
                    "elementKind": "method",
                    "justification": "start process with correlation key from arbitrary nodes"
                },
                {
                    "code": "java.method.addedToInterface",
                    "new": "method java.util.List<org.kie.server.api.model.instance.NodeInstance> org.kie.server.client.ProcessServicesClient::findNodeInstancesByType(java.lang.String, java.lang.Long, java.lang.String, java.lang.Integer, java.lang.Integer)",
                    "package": "org.kie.server.client",
                    "classSimpleName": "ProcessServicesClient",
                    "methodName": "findNodeInstancesByType",
                    "elementKind": "method",
                    "justification": "method for searching for records types"
                }
            ]
        }
    }
}
